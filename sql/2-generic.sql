-- Syntax prior to Oracle Database 23ai
select systimestamp from dual

-- Syntax in Oracle Database 23ai
select systimestamp;







--NEW BOOLEAN DATA TYPE
drop table if exists new_orders;

create table if not exists new_orders
(id number generated by default on null as identity,
product_id number,
order_date timestamp,
customer_id number,
total_value number(6,2),
order_shipped boolean,
warranty interval year to month);



insert into new_orders (product_id, order_date, customer_id, total_value, order_shipped, warranty)
values
(12, systimestamp, 100001, 10.23, true, interval '2-0' year to month),
(234, systimestamp, 223223, 1200.00, false, interval '1-6' year to month),
(57, systimestamp, 238121, 110.1, True, interval '5-0' year to month),
(2, systimestamp, 78993, 20.50, null, interval '0-6' year to month);



-- boolean can be used as a filter
select id,
product_id ,
order_date ,
customer_id,
total_value,
order_shipped
from new_orders
where not order_shipped;


--String Literals To Represent "TRUE" and "FALSE"
select to_boolean(1)
union all
select to_boolean('FALSE')
union all
select to_boolean('T')
union all
select to_boolean(0)
union all
select to_boolean('y')
union all
select to_boolean('no')
union all
select to_boolean('yes')
union all
select to_boolean('off')
union all
select to_boolean(null);



















/* Data Use Case Domains
A data use case domain is a dictionary object that belongs to a schema and encapsulates a set of optional properties 
and constraints for common values, such as credit card numbers or email addresses. After you define a use case domain, 
you can define table columns to be associated with that domain, thereby explicitly applying the domain's optional properties 
and constraints to those columns.
With use case domains, you can define how you intend to use data centrally. 
They make it easier to ensure you handle values consistently across applications and improve data quality. */

drop table if exists new_customers purge;

create domain if not exists date_of_birth as date;

create domain if not exists address as varchar2(100);

create domain if not exists persons_name as (first_name as varchar2(100),
                               last_name as varchar2(100))
                               display initcap(first_name) || ' ' || (initcap(last_name));


create domain if not exists email AS varchar2(30)  
    constraint email_c check (regexp_like (email, '^(\S+)\@(\S+)\.(\S+)$'));


create domain if not exists us_postal_code as varchar2(10)
    constraint zip_code_c check (regexp_like(us_postal_code, '^\d{5}(?-\d{4})?$'));


--Check domains
select LISTAGG(name, ',') as "User defined domains" from all_domains where owner = 'ORA23C';

select LISTAGG(name, ',') as "System provided domains" from all_domains where owner = 'SYS';




create table if not exists new_customers (
    id             number generated by default on null as identity,
    first_name     varchar2(100),
    last_name      varchar2(100),
    dob            date_of_birth,         -- User Defined Domain
    email          email,                 -- User Defined Domain
    address        address,               -- User Defined Domain
    zip            us_postal_code,        -- User Defined Domain
    phone_number   phone_number_d,        -- System Provided Domain
    credit_card    credit_card_number_d,  -- System Provided Domain
    joined_date    timestamp default systimestamp,
    gold_customer  boolean default false,
    domain persons_name(first_name, last_name));


--Let's try to insert some data

insert into new_customers (id, first_name, last_name, email, address, zip)
values
(100001, 'Dom', 'Giles', 'dg7889@gmail.com', '10 smith street', '12345:123');

insert into new_customers (id, first_name, last_name, email, address, zip)
values
(100001, 'Martha', 'Richards', 'mrichards', '11 smith street', '64783');

insert into new_customers (id, first_name, last_name, email, address, zip)
values
(100001, 'Dom', 'Giles', 'dg7889@gmail.com', '10 smith street', '34454-1667'),
(223223, 'John', 'Smith', 'jsmith@hotmail.com', 'the grove', '28902'),
(238121, 'janet', 'white', 'jw123@gmail.com', 'apartment 256, 120 east street', '18092-7980'),
(78993, 'SUE', 'GRAY', 'sue_gray@gmail.com', '2345 main street', '34454');


-- show associated fields rendered correctly
select domain_display(first_name, last_name) as customer_name from new_customers;

--vs
select first_name || '  ' || last_name as customer_name from new_customers;


select * from USER_DOMAINS;

select * from USER_DOMAIN_CONSTRAINTS;





















--SCHEMA ANNOTATIONS
/* Oracle Database schema annotations are a lightweight declarative facility for developers to centrally register usage properties for database schema
objects. Annotations are stored directly inside the database in dictionary tables alongside the data model definition and the data itself, 
and available to any applications in order to standardize behavior across common data, but are not interpreted by the database in any way. 
They should be thought of as lightweight standardized markup for database metadata, for use by applications to register 
and process extended and custom usage properties. */

alter table new_customers modify (email annotations (PID 'true'));

alter table new_customers modify (email annotations (data_classification 'confidential'));

alter table new_customers modify (email annotations (ui_display_label 'Email'));

drop table if exists new_customers;

create table if not exists new_customers (
    id             number generated by default on null as identity      annotations (data_classification 'restricted', ui_display_label 'Customer ID', classification 'Identifier'),
    first_name     varchar2(100)                                        annotations (data_classification 'confidential', ui_display_label 'First Name', PID, classification 'Naming'),
    last_name      varchar2(100)                                        annotations (data_classification 'confidential', ui_display_label 'Last Name', PID, classification 'Naming'),
    dob            date_of_birth                                        annotations (data_classification 'confidential', ui_display_label 'Date of Birth', PID, classification 'Birth Date'),
    email          email                                                annotations (data_classification 'confidential', ui_display_label 'Email', PID, classification 'Email'),
    address        address                                              annotations (data_classification 'confidential', ui_display_label 'Address', PID, classification 'Location'),
    zip            us_postal_code                                       annotations (data_classification 'confidential', ui_display_label 'Zip Code', PID, classification 'Location'),
    phone_number   phone_number_d                                       annotations (data_classification 'confidential', ui_display_label 'Phone Number', PID, classification 'Phone'),
    credit_card    credit_card_number_d                                 annotations (data_classification 'confidential', ui_display_label 'Credit Card Number', PID, classification 'Credit Card'),
    joined_date    timestamp default systimestamp                       annotations (data_classification 'restricted', ui_display_label 'Joining Date', classification 'Application Date'),
    gold_customer  boolean default false                                annotations (data_classification 'public', ui_display_label 'Gold Member', classification 'Application Info')
    domain persons_name(first_name, last_name)) ;



select * from USER_ANNOTATIONS_USAGE where annotation_name = 'PID';

insert into new_customers (id, first_name, last_name, email, address, zip)
values
(100001, 'Dom', 'Giles', 'dg7889@gmail.com', '10 smith street', '34454-1667'),
(223223, 'John', 'Smith', 'jsmith@hotmail.com', 'the grove', '28902'),
(238121, 'janet', 'white', 'jw123@gmail.com', 'apartment 256, 120 east street', '18092-7980'),
(78993, 'SUE', 'GRAY', 'sue_gray@gmail.com', '2345 main street', '34454');




commit;
/

exit
/














--Direct joins for updates and deletesÂ¶

select * from new_customers;

update new_customers c
set c.gold_customer = true
from new_orders o
where o.customer_id = c.id
and o.total_value > 1000;


select c.id, c.first_name, c.last_name, c.email, c.address, c.zip, c.gold_customer, sum(o.total_value) as "Total Orders Value"
from new_customers c, new_orders o
where o.customer_id = c.id
group by c.id, c.first_name, c.last_name, c.email, c.address, c.zip, c.gold_customer;
























--GROUP BY ALIAS (bug in 23.4)

select sum(o.total_value) as "Total Orders Value",
       c.id,
       c.first_name,
       c.last_name
from new_orders o,
     new_customers c
where o.customer_id = c.id
group by c.id, c.first_name, c.last_name
having "Total Orders Value" < 100;


alter session set group_by_position_enabled=TRUE;

select sum(o.total_value) as "Total Orders Value",
       c.id,
       c.first_name,
       c.last_name
from new_orders o,
     new_customers c
where o.customer_id = c.id
group by 1,2, 3, 4
having "Total Orders Value" < 100;


SELECT first_name, COUNT(*)
  FROM new_customers
  GROUP BY first_name;

alter session set group_by_position_enabled=TRUE;

SELECT first_name, COUNT(*)
  FROM new_customers
  GROUP BY 1;





exit;




